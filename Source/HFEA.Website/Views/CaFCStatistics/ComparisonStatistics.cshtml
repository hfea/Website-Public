@using HFEA.Web.Constants;
@using HFEA.Web.ViewModel.Constants;
@using HFEA.Web.ViewModel.CaFC;
@using HFEA.Web.ViewModel.CaFC.Model;

@inherits UmbracoViewPage<ClinicStatsVsNationalViewModel>
@{
    CaFCConstants.StatsTreatmentType statType;
    if (!QueryString.QueryParams.type.TryGetQryParamValueAsEnum<CaFCConstants.StatsTreatmentType>(out statType)
        || statType == CaFCConstants.StatsTreatmentType.Unknown)
    {
        statType = CaFCConstants.StatsTreatmentType.PerTreatmentCycle;
    }

    var statsOptionsDict = new Dictionary<CaFCConstants.StatsTreatmentType, string>()
        {
            { CaFCConstants.StatsTreatmentType.PerEmbryoTransferred, Umbraco.AssignedContentItem.GetPropertyValue<string>("treatmentTypeOption2") },
            { CaFCConstants.StatsTreatmentType.PerTreatmentCycle, Umbraco.AssignedContentItem.GetPropertyValue<string>("treatmentTypeOption1") },
        };


    List<SelectListItem> statsDropDownOptions = new List<SelectListItem>()
        {            
            new SelectListItem()
                {
                    Text = statsOptionsDict[CaFCConstants.StatsTreatmentType.PerTreatmentCycle],
                    Value = ((int)CaFCConstants.StatsTreatmentType.PerTreatmentCycle).ToString(),
                    Selected = statType == CaFCConstants.StatsTreatmentType.PerTreatmentCycle
                },
            new SelectListItem()
                {
                    Text = statsOptionsDict[CaFCConstants.StatsTreatmentType.PerEmbryoTransferred],
                    Value = ((int)CaFCConstants.StatsTreatmentType.PerEmbryoTransferred).ToString(),
                    Selected = statType == CaFCConstants.StatsTreatmentType.PerEmbryoTransferred
                },

        };
}

@if (Model != null)
{
    string hidden = " style=\"display:none\"";
    string perCycleHidden = statType == CaFCConstants.StatsTreatmentType.PerTreatmentCycle
        ? "" : hidden;
    string perEmbryoHidden = statType == CaFCConstants.StatsTreatmentType.PerEmbryoTransferred
        ? "" : hidden;


    <div class="panel-hfea panel-default">
        <div class="panel-heading" role="tab" id="collapse-stats-header">
            <h4 class="panel-title parent-panel-title">
                <a role="button" class="accordion-toggle open" data-parent="#accordion" href="#collapse-stats" aria-expanded="true" aria-controls="collapse-stats">
                    @Umbraco.Field("accordion2Label")
                    <span class="chevron"></span>
                </a>
            </h4>
        </div>
        <div id="collapse-stats" class="panel-collapse plain-panel-collapse collapse in" role="tabpanel" aria-labelledby="collapse-stats-header">
            <div class="panel-body detailedStats-comparision">
               
                @if (Model.PerCycleDataList != null && Model.PerCycleDataList.Count > 0
                    && Model.PerEmbryoDataList != null && Model.PerEmbryoDataList.Count > 0)
                {
                 <div class="row mb-50">

                    <div class="col-lg-8 col-lg-offset-2 mt-50 mb-50 hide-no-js">
                        <h2 class="h3 mb-50">@Umbraco.Field("treatmentTypeLabel")</h2>
                        @Html.DropDownList("statsSelect", statsDropDownOptions, new { @class = "detailedStats-comparisionSelect hfea-select full-width-select" })
                    </div>

                </div>
                }
                @if (Model.StatsParameters != null)
                {
                    var sp = Model.StatsParameters;
                    <div class="row">
                        <div class="col-lg-12">
                            <p><span class="grey-text"><strong>@Umbraco.Field("showDataForLabel")</strong></span> @sp.Year.Value <span class="teal-text">|</span> @sp.Treatment.Value <span class="teal-text">|</span> @sp.Age.Value <span class="teal-text">|</span> @sp.Source.Value</p>
                        </div>
                    </div>
                }

                <div class="row">
                    <div class="col-lg-12">
                        <div class="table-grid bordered-grid">
                            @if (Model.PerCycleDataList != null && Model.PerCycleDataList.Count > 0)
                            {
                                <div class="detailedStats-comparisionContent">
                                    <h2 class="h3 mb-50 mt-50">@statsOptionsDict[CaFCConstants.StatsTreatmentType.PerTreatmentCycle]</h2>
                                    <div class="table-grid-row" @perCycleHidden>

                                        @foreach (var record in Model.PerCycleDataList)
                                        {
                                            @renderRow(record)
                                        }

                                    </div>
                                </div>
                            }                            

                            @if (Model.PerEmbryoDataList != null && Model.PerEmbryoDataList.Count > 0)
                            {
                                <div class="detailedStats-comparisionContent">
                                    <h2 class="h3 mb-50 mt-50">@statsOptionsDict[CaFCConstants.StatsTreatmentType.PerEmbryoTransferred]</h2>
                                    <div class="table-grid-row" @perEmbryoHidden>

                                        @foreach (var record in Model.PerEmbryoDataList)
                                        {
                                            @renderRow(record)
                                        }

                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                </div>

            </div>
        </div>
    </div>
}

@helper renderRow(StatsDetailStatisticsItem data)
{
if (data != null)
{
    var cssCompare = data.CompareToAverage.ToString().ToLower();

    string nationalAverageLegend = "";
    if (!string.IsNullOrEmpty(data.CompareToAverageString))
    {
        nationalAverageLegend = Umbraco.AssignedContentItem.GetPropertyValue<string>("nationalAverageLegend");
        if (nationalAverageLegend.IndexOf("{0}") > -1)
        {
            string compare = string.Format("<span class=\"{0}\">{1}</span>", cssCompare, data.CompareToAverageString.ToLower());
            nationalAverageLegend = string.Format(nationalAverageLegend, compare);
        }
    }

    <div class="table-grid-row">
        <div class="col-sm-12 col-md-4 col ps-30">
            <h3 class="mb-50">@data.NationalComparisonSuccessTitle</h3>
            <div class="circle-border green">
                <div>
                    @if (data.NationalComparisonTotalCount == 0)
                    {
                        <span class="h3">@data.NationalComparisonSuccessCountString</span>
                    }
                    else
                    {
                        <span class="h3">@data.NationalComparisonSuccessCount</span>@Html.Raw("out of")<span class="h3">@data.NationalComparisonTotalCount</span>
                    }
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-4 col ps-30">
            <span class="stat-large mb-20">@data.ClinicRate%</span>
            @*<p>@data.ClinicSuccessLikelinessTitle</p>*@
            <div class="statistics-container small mt-50">
                <div class="grid">
                    <table>
                        <tbody>
                            <tr class="label-row">
                                <td></td>
                                <td></td>
                                <td>25</td>
                                <td></td>
                                <td></td>
                                <td>50</td>
                                <td></td>
                                <td></td>
                                <td>75</td>
                                <td></td>
                                <td></td>
                                <td>100</td>
                            </tr>
                            <tr class="first-row">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                            <tr class="second-row">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="rangeChart">
                    <div class="range" style="left: @data.ReliabilityRangeMin%; width: @Html.Raw(data.ReliabilityRangeMax - data.ReliabilityRangeMin)%;">
                    </div>
                    <div class="mean left" style="left: @data.ClinicRate%;">
                    </div>
                    <div class="nat-ave" style="left: @data.NationalAverage%;">
                    </div>
                </div>
            </div>

        </div>
        <div class="col-sm-12 col-md-4 col ps-30">
            <h3 class="mb-50">@Umbraco.Field("averageTitle")</h3>
            <div class="circle-border green">
                <div>
                    <span class="h3">@data.NationalAverage%</span>
                    <span class="stat-large ticks">

                            @if (data.IsWorseThanAverage)
                            {
                                <span> X </span>
                            }
                            else if (data.CompareToAverage == CaFCConstants.ComparableToAverage.Above
                                || data.CompareToAverage == CaFCConstants.ComparableToAverage.Consistent)
                            {
                                    <i class="hfea-icon-long-tick"></i>
                                    if (data.CompareToAverage == CaFCConstants.ComparableToAverage.Above)
                                    {
                                    <i class="hfea-icon-long-tick"></i>
                                    }
                            }
                            
                        
                    </span>
                </div>
            </div>
            <p class="mt-20 detailedStats-averageLegend">@Html.Raw(nationalAverageLegend)</p>
        </div>
    </div>
}
}